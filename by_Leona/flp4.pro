domains
	список = char*
	список—лов = список*
	
predicates
	nondeterm найти—амоеƒлинное—лово(список—лов,список) %1-й аргумент - входной; 2-й - выходной		
	nondeterm слово(список,список,список,integer)	    %входной список; слово; выходной список
	длинное—лово(список,список,список)		    %1-й и 2-й аргументы -входные; 3-й - выходной
	nondeterm длина—лова(список,integer,integer)	    %1-й аргумент - слово; 2-й - входной; 3-й - выходной
	nondeterm сформировать—писок—лов(список,список—лов)
	nondeterm меню	
	nondeterm пунктћеню(char)
	nondeterm чтение—писка(список)	
	реверс (список—лов,список—лов)
	сложить(список—лов, список,список—лов)
	append(список—лов,список—лов,список—лов)
clauses
	append([],—писок—лов,—писок—лов).
	append([√олова|Cписок—лов1],Cписок—лов2,[√олова|Cписок—лов3]):-append(Cписок—лов1,Cписок—лов2,Cписок—лов3).
	
	реверс([],[]).
	реверс([√олова|’вост],–еверс—писок):-реверс(’вост,–еверс’вост),append(–еверс’вост,[√олова],–еверс—писок).
	
	длинное—лово(—лово1,—лово2,—лово1):-
		длина—лова(—лово1,ƒлина1,0),
		длина—лова(—лово2,ƒлина2,0),
		ƒлина1 >= ƒлина2,!.			
	длинное—лово(_,—лово2,—лово2).
	
	найти—амоеƒлинное—лово([],[]):-!.			% если список пустой
	найти—амоеƒлинное—лово([√олова|’вост],—лово1):-
		найти—амоеƒлинное—лово(’вост,—лово2),
		длинное—лово(√олова,—лово2,—лово1).
		
		

	слово([' '|’вост],—лово,ќстаток,0):-			%пробел в начале слова
		слово(’вост,—лово,ќстаток,0),!.	
	слово([' '|’вост],[],’вост,1):-!.			%пробел в середине
	слово([√олова|[]],[√олова],[],1):-!. 			%последний символ
	слово([√олова|’вост],[√олова| онец],ќстаток,_) :-	%пока нормальные символы 
		слово(’вост, онец,ќстаток,1).
	
	
	сформировать—писок—лов(¬ходной—писок,—писок—лов):-
				слово(¬ходной—писок,—лово,ќстаток,0),			%ќстаток от входного списка
				сформировать—писок—лов(ќстаток,Ќовый—писок),
				сложить(Ќовый—писок,—лово,—писок—лов),!.	
	сформировать—писок—лов(_,[]):-!.

	длина—лова([],–езультат,–езультат).
	длина—лова([_|’вост],–езультат,ƒлина) :-
		Ќова€ƒлина = ƒлина + 1,
		длина—лова(’вост,–езультат,Ќова€ƒлина).
		
		
	%  онкатенирует два списка в один    
	сложить ( [], H, [H|[]] ).					% ≈сли первый список пустой, то значит во втором - хвост результата конкатенации 
	сложить ( [X|L1], L2, [X|L3] ) :-					
		сложить (L1, L2, L3).					% –екурси€ сворачиваетс€ и в голову результата записываетс€ голова первого списка
	
	меню:-
		write ( "1-¬вод последовательности \n"),
		write ( "2-¬ыход"),
		write ("\n¬ведите номер пункта: "), 
		readchar (X),
		пунктћеню(X).
		
	пунктћеню('1'):-
		write ( "\n¬ведите список: "),чтение—писка(—писок),
		сформировать—писок—лов(—писок,—писок—лов),
		%реверс(—писок—лов,–еверс—писок),
		найти—амоеƒлинное—лово(–еверс—писок,—лово1),
		длина—лова(—лово1,ƒлина,0),
		write("\n\nƒлина самого длинного слова: ", ƒлина, "\n"),
		write("—лово: ", —лово1, "\n\n"),
		меню.	
	
	пунктћеню('2'):-
   		write("\n¬ыход"),
   		exit.
		
	чтение—писка([H|T]):-
		readchar(H),
		write(H),
		H <> 13,!,
		чтение—писка(T).
		
	чтение—писка([]).
goal
	меню.
